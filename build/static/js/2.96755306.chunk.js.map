{"version":3,"sources":["api/shop.js","assets/js/http.js","reducers/ShoppingCart/actions.js","containers/ShoppingCart/components/Products/Product.js","containers/ShoppingCart/components/Products/ProductItem.js","containers/ShoppingCart/components/Products/ProductsList.js","containers/ShoppingCart/Products.js","containers/ShoppingCart/components/Cart/Cart.js","containers/ShoppingCart/Cart.js","containers/ShoppingCart/index.js"],"names":["shop","_ref","url","query","axios","method","params","Object","objectSpread","then","res","status","data","Promise","reject","err","message","_get","resolve","catch","e","payload","cb","timeout","setTimeout","getAllProducts","dispatch","products","type","types","console","log","Product","price","quantity","title","_react_16_6_3_react_default","a","createElement","styles","buttonStyle","backgroundColor","color","padding","ProductItem","product","onAddToCartClicked","style","marginBottom","Products_Product","inventory","onClick","disabled","ProductsList","children","connect","state","getVisibleProducts","addToCart","productId","getState","shoppingcart","byId","addToCartUnsafe","Products_ProductsList","map","Products_ProductItem","key","id","Cart","total","onCheckoutClicked","hasProducts","length","nodes","getCartProducts","getTotal","checkout","cart","components_Cart_Cart","ShoppingCart","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","init","Products","ShoppingCart_Cart","React","Component","ownProps"],"mappings":"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","file":"static/js/2.96755306.chunk.js","sourcesContent":["import _products from './products.json'\r\nimport { _get } from '@/assets/js/http'\r\n\r\nconst TIMEOUT = 100\r\n\r\nexport const getNetProducts = () => {\r\n\tconst url = \"data/products.json\"; // http://www.helloui.net/api/data/products.json\r\n\tconst query = {}\r\n\treturn _get({\r\n\t\turl,\r\n\t\tquery\r\n\t}).then((data) => Promise.resolve(data)).catch((e) => Promise.reject(e));\r\n}\r\n\r\nexport default {\r\n\tgetNetProducts: getNetProducts,\r\n\tgetLocalProducts: (cb, timeout) => setTimeout(() => cb(_products), timeout || TIMEOUT),\r\n\tbuyProducts: (payload, cb, timeout) => setTimeout(() => cb(), timeout || TIMEOUT)\r\n}","import axios from 'axios';\r\n\r\n/**\r\n * Get\r\n * {String} url：地址\r\n * {String} query：参数\r\n */\r\nexport const _get = ({url, query}) => {\r\n\treturn axios({\r\n\t\tmethod: 'get',\r\n\t\turl,\r\n\t\tparams: { ...query}\r\n\t}).then((res) => {\r\n\t\tif(res.status >= 200 && res.status < 300) {\r\n\t\t\treturn res.data\r\n\t\t}\r\n\t\treturn Promise.reject(res)\r\n\t}, (err) => {\r\n\t\treturn Promise.reject(err.message || err.data);\r\n\t});\r\n};\r\n\r\n/**\r\n * Post\r\n * {String} url：地址\r\n * {String} body：参数\r\n */\r\nexport const _post = ({url, body}) => {\r\n\treturn axios({\r\n\t\tmethod: 'post',\r\n\t\turl,\r\n\t\tdata: { ...body}\r\n\t}).then((res) => {\r\n\t\tif(res.status >= 200 && res.status < 300) {\r\n\t\t\treturn res.data\r\n\t\t}\r\n\t\treturn Promise.reject(res);\r\n\t}, (err) => {\r\n\t\treturn Promise.reject(err.message || err.data);\r\n\t});\r\n};\r\n\r\n/**\r\n * Delete\r\n * {String} url：地址\r\n * {String} body：参数\r\n */\r\nexport const _delete = ({url, body}) => {\r\n\treturn axios({\r\n\t\tmethod: 'delete',\r\n\t\turl,\r\n\t\tdata: { ...body}\r\n\t}).then((res) => {\r\n\t\tif(res.status >= 200 && res.status < 300) {\r\n\t\t\treturn res.data\r\n\t\t}\r\n\t\treturn Promise.reject(res);\r\n\t}, (err) => {\r\n\t\treturn Promise.reject(err.message || err.data);\r\n\t});\r\n};\r\n\r\n/**\r\n * Put\r\n * 用于更新操作时，需传递包含sql记录的全部字段的对象，否则缺少的属性该字段将在数据库置空。\r\n * {String} url：地址\r\n * {String} body：参数\r\n */\r\nexport const _put = ({url, body}) => {\r\n\treturn axios({\r\n\t\tmethod: 'put',\r\n\t\turl,\r\n\t\tdata: { ...body}\r\n\t}).then((res) => {\r\n\t\tif(res.status >= 200 && res.status < 300) {\r\n\t\t\treturn res.data\r\n\t\t}\r\n\t\treturn Promise.reject(res);\r\n\t}, (err) => {\r\n\t\treturn Promise.reject(err.message || err.data);\r\n\t});\r\n};\r\n\r\n/**\r\n * Patch\r\n * 用于更新操作时，需传递包含sql记录的部分字段的对象且只更新该部分字段内容。\r\n * {String} url：地址\r\n * {String} body：参数\r\n */\r\nexport const _patch = ({url, body}) => {\r\n\treturn axios({\r\n\t\tmethod: 'patch',\r\n\t\turl,\r\n\t\tdata: { ...body}\r\n\t}).then((res) => {\r\n\t\tif(res.status >= 200 && res.status < 300) {\r\n\t\t\treturn res.data\r\n\t\t}\r\n\t\treturn Promise.reject(res);\r\n\t}, (err) => {\r\n\t\treturn Promise.reject(err.message || err.data);\r\n\t});\r\n};","import shop from '@/api/shop'\r\nimport * as types from './actiontypes'\r\n\r\n// 付款\r\nexport const checkout = products => (dispatch, getState) => {\r\n\tconst {\r\n\t\tcart\r\n\t} = getState()\r\n\t// 付款请求\r\n\tshop.buyProducts(products, () => {\r\n\t\tdispatch({\r\n\t\t\ttype: types.CHECKOUT_SUCCESS,\r\n\t\t\tcart\r\n\t\t})\r\n\t\t// dispatch({ type: types.CHECKOUT_FAILURE, cart })\r\n\t})\r\n}\r\n\r\nconst receiveProducts = products => ({\r\n\ttype: types.RECEIVE_PRODUCTS,\r\n\tproducts\r\n})\r\n\r\n// 请求商品列表\r\nexport const getAllProducts = () => dispatch => {\r\n\t// 请求本地JSON数据\r\n\t//\tshop.getLocalProducts(products => {\r\n\t//\t\tdispatch(receiveProducts(products))\r\n\t//\t})\r\n\t// 请求网络JSON数据\r\n\tshop.getNetProducts().then((data) => {\r\n\t\tdispatch(receiveProducts(data))\r\n\t}).catch((e) => {\r\n\t\tconsole.log(\"请求数据发生错误\");\r\n\t});\r\n}\r\n\r\nconst addToCartUnsafe = productId => ({\r\n\ttype: types.ADD_TO_CART,\r\n\tproductId\r\n})\r\n\r\n// 添加商品至购物车\r\nexport const addToCart = productId => (dispatch, getState) => {\r\n\tif(getState().shoppingcart.products.byId[productId].inventory > 0) {\r\n\t\tdispatch(addToCartUnsafe(productId))\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Product = ({ price, quantity, title }) => (\r\n  <div>\r\n    {title} 价格:&#36;{price} 数量:{quantity}\r\n  </div>\r\n)\r\n\r\nProduct.propTypes = {\r\n  price: PropTypes.number,\r\n  quantity: PropTypes.number,\r\n  title: PropTypes.string\r\n}\r\n\r\nexport default Product\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Product from './Product'\r\n\r\nconst ProductItem = ({product, onAddToCartClicked}) => (\r\n\t<div style={{ marginBottom: 20 }}>\r\n    <Product title={product.title} price={product.price} quantity={product.inventory} />\r\n    <button style={styles.buttonStyle} onClick={onAddToCartClicked} disabled={product.inventory > 0 ? '' : 'disabled'}>\r\n\t\t\t{product.inventory > 0 ? '加入购物车' : '商品卖光了'}\r\n    </button>\r\n  </div>\r\n)\r\n\r\nProductItem.propTypes = {\r\n\tproduct: PropTypes.shape({\r\n\t\ttitle: PropTypes.string.isRequired,\r\n\t\tprice: PropTypes.number.isRequired,\r\n\t\tinventory: PropTypes.number.isRequired\r\n\t}).isRequired,\r\n\tonAddToCartClicked: PropTypes.func.isRequired\r\n}\r\n\r\nconst styles = {\r\n\tbuttonStyle: {\r\n\t\tbackgroundColor: '#00746a',\r\n\t\tcolor: 'white',\r\n\t\tpadding: '5px'\r\n\t}\r\n}\r\n\r\nexport default ProductItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ProductsList = ({ title, children }) => (\r\n  <div>\r\n    <h3>{title}</h3>\r\n    <div>{children}</div>\r\n  </div>\r\n)\r\n\r\nProductsList.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ProductsList\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { addToCart } from '@/reducers/ShoppingCart/actions'\r\nimport { getVisibleProducts } from '@/reducers/ShoppingCart'\r\nimport ProductItem from '@/containers/ShoppingCart/components/Products/ProductItem'\r\nimport ProductsList from '@/containers/ShoppingCart/components/Products/ProductsList'\r\n\r\nconst ProductsContainer = ({\r\n\tproducts,\r\n\taddToCart\r\n}) => (\r\n\t<ProductsList title=\"商品\">\r\n    {products.map(product =>\r\n      <ProductItem\r\n        key={product.id}\r\n        product={product}\r\n        onAddToCartClicked={() => addToCart(product.id)} />\r\n    )}\r\n  </ProductsList>\r\n)\r\n\r\nProductsContainer.propTypes = {\r\n\tproducts: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: PropTypes.number.isRequired,\r\n\t\ttitle: PropTypes.string.isRequired,\r\n\t\tprice: PropTypes.number.isRequired,\r\n\t\tinventory: PropTypes.number.isRequired\r\n\t})).isRequired,\r\n\taddToCart: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tproducts: getVisibleProducts(state)\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps, {\r\n\t\taddToCart\r\n\t}\r\n)(ProductsContainer)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Product from '../Products/Product'\r\n\r\nconst Cart  = ({ products, total, onCheckoutClicked }) => {\r\n  const hasProducts = products.length > 0\r\n  const nodes = hasProducts ? (\r\n    products.map(product =>\r\n      <Product\r\n        title={product.title}\r\n        price={product.price}\r\n        quantity={product.quantity}\r\n        key={product.id}\r\n      />\r\n    )\r\n  ) : (\r\n    <em>(购物车没有任何商品)</em>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <h3>我的购物车</h3>\r\n      <div>{nodes}</div>\r\n      <p>总金额: &#36;{total}</p>\r\n      <button style={styles.buttonStyle} onClick={onCheckoutClicked}\r\n        disabled={hasProducts ? '' : 'disabled'}>\r\n        \t付款\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nCart.propTypes = {\r\n  products: PropTypes.array,\r\n  total: PropTypes.string,\r\n  onCheckoutClicked: PropTypes.func\r\n}\r\n\r\nconst styles = {\r\n\tbuttonStyle: {\r\n\t\tbackgroundColor: '#00746a',\r\n\t\tcolor: 'white',\r\n\t\tpadding: '5px'\r\n\t}\r\n}\r\n\r\nexport default Cart\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { checkout } from '@/reducers/ShoppingCart/actions'\r\nimport { getTotal, getCartProducts } from '@/reducers/ShoppingCart'\r\nimport Cart from '@/containers/ShoppingCart/components/Cart/Cart'\r\n\r\nconst CartContainer = ({ products, total, checkout }) => (\r\n  <Cart\r\n    products={products}\r\n    total={total}\r\n    onCheckoutClicked={() => checkout(products)} />\r\n)\r\n\r\nCartContainer.propTypes = {\r\n  products: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n    quantity: PropTypes.number.isRequired\r\n  })).isRequired,\r\n  total: PropTypes.string,\r\n  checkout: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  products: getCartProducts(state),\r\n  total: getTotal(state)\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { checkout }\r\n)(CartContainer)\r\n","import React from 'react';\r\nimport ProductsContainer from '@/containers/ShoppingCart/Products.js'\r\nimport CartContainer from '@/containers/ShoppingCart/Cart.js'\r\nimport { connect } from 'react-redux'\r\nimport { getAllProducts } from '@/reducers/ShoppingCart/actions'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ShoppingCart extends React.Component {\r\n\tstatic propTypes = {\r\n\t\tinit: PropTypes.func.isRequired\r\n\t}\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst {init} = this.props;\r\n\t\tinit();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h2>购物车实例</h2>\r\n\t\t\t    <hr/>\r\n\t\t\t    <ProductsContainer />\r\n\t\t\t    <hr/>\r\n\t\t\t    <CartContainer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n\tinit: () => (dispatch(getAllProducts()))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ShoppingCart)"],"sourceRoot":""}